import {Show, createSignal, onMount} from 'solid-js'
{Game, type GameType} from './Game.civet'

export function App
  [n, setN] := createSignal 3
  let game: GameType
  [mainSize, setMainSize] := createSignal<number | undefined>()
  let main: HTMLElement
  [potential, setPotential] := createSignal ''
  [potentialValue, setPotentialValue] := createSignal<number | undefined>()

  onMount =>
    new ResizeObserver (entries) =>
      for entry of entries
        size := entry.borderBoxSize[0]
        setMainSize Math.min size.inlineSize, size.blockSize
    ||> .observe main!

  <header>
    {n()}<sup>2</sup>&thinsp;&minus;&thinsp;1 = {n()**2-1} Puzzle
  <main ref=main! style=
    '--main-size': if mainSize() then `${mainSize()}px`
  >
    <div .container style=
      width: `min(100%, ${mainSize()}px)`
      height: `min(100%, ${mainSize()}px)`
    >
      <Show when=n() keyed>
        (n) =>
          <Game ref={(g) => game = g} {n} {potential()} {setPotentialValue} />
  <footer>
    <span>
      <i>n</i>&nbsp;=&nbsp;<input #n type="number" min="2" value="3" onInput={(e) => setN e.target.valueAsNumber}>
    <span .buttons>
      <button onClick={(e) => game.randomize true}>Random Solvable
      <button onClick={(e) => game.randomize false}>Random Unsolvable
    <span .potential>
      <select name="potential" onInput=
        (e) => setPotential e.currentTarget.value
      >
        <option value="">Potential function
        <option value="invPlusTaxi"># inversions + taxicab to bottom right
        <option value="invNoEmpty"># inversions, ignoring empty (odd only)
      <Show when=potentialValue()>
        (value) => <span .value> =&nbsp;{value()}
    <a href="https://github.com/edemaine/sliding-squares-puzzle">Source code on GitHub</a>
