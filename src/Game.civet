{type JSX, For, batch, createMemo, createRenderEffect, on, onMount} from 'solid-js'
{createMutable} from 'solid-js/store'
{shuffle, isOdd, countInversions} from './permutation.civet'

interface Square
  i: number
  x: number
  y: number

export type GameType = JSX.Element & {randomize: (wantSolvable: boolean) => void}

export function Game(props: {
  n: number
  ref: (game: GameType) => void
  potential: string
  setPotentialValue: (value: number | undefined) => void
}): JSX.Element & {randomize: (wantSolvable: boolean) => void}
  state := createMutable
    squares: [] as Square[]
    location: {} as Record<string, Square>

  function move(square: Square, x?: number, y?: number): void
    square.x = x if x?
    square.y = y if y?
    state.location[`${square.x},${square.y}`] = square

  function swap(square1: Square, square2: Square): void
    [square1.x, square2.x] = [square2.x, square1.x]
    [square1.y, square2.y] = [square2.y, square1.y]
    move square1
    move square2

  function empty: Square
    state.squares.0

  createRenderEffect on (=> props.n), =>
    {n} := props
    state.location = {}
    state.squares = [
      i: 0 // empty
      x: n - 1
      y: n - 1
    ]
    for each y of [0...n]
      for each x of [0...n]
        continue if x is y is n-1
        square := {
          i: y*n + x + 1
          x, y
        }
        state.squares.push square
    move square for each square of state.squares
    setTimeout (=> randomize true), 0

  createRenderEffect =>
    {n, potential, setPotentialValue} := props
    setPotentialValue
      switch potential
        when 'invNoEmpty'
          countInversions toPermutation().filter &

  function randomize(wantSolvable: boolean): void
    batch =>
      {n} := props
      for count in [0...100]
        permutation := shuffle state.squares[..]
        holeX := Math.random() * n
        holeY := Math.random() * n
        i .= 0
        for each y of [0...n]
          for each x of [0...n]
            move permutation[i++], x, y
        return if isSolvable() xnor wantSolvable
      console.log "Extremely unlucky: 100 failed trials"

  function toPermutation(): number[]
    {n} := props
    pi := []
    for each y of [0...n]
      for each x of [0...n]
        pi.push state.location[`${x},${y}`].i
    pi

  // https://en.wikipedia.org/wiki/15_Puzzle#Solvability
  // The invariant is the parity of the permutation of all 16 squares plus the
  // parity of the taxicab distance (number of rows plus number of columns) of
  // the empty square from the lower right corner.
  function isSolvable(): boolean
    {n} := props
    return true if n <= 1
    pi := toPermutation()
    inversions := +isOdd pi
    taxicab := (n-1 - empty().x) + (n-1 - empty().y)
    (inversions + taxicab) % 2 is 0

  function nextToEmpty(square: Square): {dx: number, dy: number} | undefined
    dx := square.x - empty().x
    dy := square.y - empty().y
    if Math.abs(dx) + Math.abs(dy) is 1
      {dx, dy}

  function onClick(e: MouseEvent): void
    element := (e.target as HTMLElement)?.closest?('.square') as HTMLElement
    return unless element?
    {i} := element.dataset
    return unless i?
    square := state.squares[+i]
    return unless square?
    if nextToEmpty square
      swap square, empty()
  
  onMount =>
    window.addEventListener 'keydown', (e) =>
      // Motion for blank space
      dx .= 0
      dy .= 0
      switch e.key
        when 'ArrowUp'
          dy = +1
        when 'ArrowDown'
          dy = -1
        when 'ArrowLeft'
          dx = +1
        when 'ArrowRight'
          dx = -1
      if dx or dy
        newX := empty().x + dx
        newY := empty().y + dy
        return unless 0 <= newX < props.n and 0 <= newY < props.n
        square := state.location[`${newX},${newY}`]
        swap square, empty()
        e.preventDefault()

  fillFrac := 0.9
  shift := createMemo =>
    (1 - fillFrac) / props.n * 100 / 2 / (fillFrac / props.n)

  <div .game {onClick} style=
    "--square-size": `calc(${100 * fillFrac / props.n}%)`
    "--font-size": `clamp(1rem, ${0.8 * fillFrac / props.n} * var(--main-size) - 40px, 100rem)`
  >
    <For each=state.squares>
      (square) => if square.i
        <div .square style={
          transform: `translate(${square.x * 100 / fillFrac + shift()}%, ${square.y * 100 / fillFrac + shift()}%)`
          cursor: switch nextToEmpty square
            ^undefined then ''
            {dx:  1} then 'w-resize'
            {dx: -1} then 'e-resize'
            {dy:  1} then 'n-resize'
            {dy: -1} then 's-resize'
        } data-i={square.i}>
          <span .number>{square.i}
  |> as GameType
  ||> &!.randomize = randomize
  ||> props.ref
