{For, batch, createMemo, createRenderEffect, on, onMount} from 'solid-js'
{createMutable} from 'solid-js/store'
{shuffle, isOdd} from './permutation.civet'

interface Square
  i: number
  x: number
  y: number

export function Game(props: {n: number})
  state := createMutable
    squares: [] as Square[]
    location: {} as Record<string, Square>

  function move(square: Square, x?: number, y?: number): void
    square.x = x if x?
    square.y = y if y?
    state.location[`${square.x},${square.y}`] = square

  createRenderEffect on (=> props.n), =>
    {n} := props
    state.location = {}
    state.squares = [
      i: 0 // empty
      x: n - 1
      y: n - 1
    ]
    for each y of [0...n]
      for each x of [0...n]
        continue if x is y is n-1
        square := {
          i: y*n + x + 1
          x, y
        }
        state.squares.push square
    move square for each square of state.squares
    setTimeout (=> randomize true), 0

  function randomize(wantSolvable: boolean): void
    batch =>
      {n} := props
      for count in [0...100]
        permutation := shuffle state.squares[..]
        holeX := Math.random() * n
        holeY := Math.random() * n
        i .= 0
        for each y of [0...n]
          for each x of [0...n]
            move permutation[i++], x, y
        return if isSolvable() xnor wantSolvable
      console.log "Extremely unlucky: 100 failed trials"

  // https://en.wikipedia.org/wiki/15_Puzzle#Solvability
  // The invariant is the parity of the permutation of all 16 squares plus the
  // parity of the taxicab distance (number of rows plus number of columns) of
  // the empty square from the lower right corner.
  function isSolvable(): boolean
    {n} := props
    return true if n <= 1
    pi := []
    for each y of [0...n]
      for each x of [0...n]
        pi.push state.location[`${x},${y}`].i
    inversions := +isOdd pi
    taxicab := (n-1 - state.squares.0.x) + (n-1 - state.squares.0.y)
    (inversions + taxicab) % 2 is 0
  
  onMount =>
    window.addEventListener 'keydown', (e) =>
      // Motion for blank space
      dx .= 0
      dy .= 0
      switch e.key
        when 'ArrowUp'
          dy = +1
        when 'ArrowDown'
          dy = -1
        when 'ArrowLeft'
          dx = +1
        when 'ArrowRight'
          dx = -1
      if dx or dy
        empty := state.squares.0
        newX := empty.x + dx
        newY := empty.y + dy
        return unless 0 <= newX < props.n and 0 <= newY < props.n
        square := state.location[`${newX},${newY}`]
        move square, empty.x, empty.y
        move empty, newX, newY
        e.preventDefault()

  fillFrac := 0.9
  shift := createMemo =>
    (1 - fillFrac) / props.n * 100 / 2 / (fillFrac / props.n)
  <div .game style={
    "--square-size": `calc(${100 * fillFrac / props.n}%)`
    "--font-size": `clamp(1rem, ${80 * fillFrac / props.n}vmin - 40px, 100rem)`
  }>
    <For each=state.squares>
      (square) => if square.i
        <div .square style={
          transform: `translate(${square.x * 100 / fillFrac + shift()}%, ${square.y * 100 / fillFrac + shift()}%)`
        }>
          <span .number>{square.i}
  ||> &!.randomize = randomize
